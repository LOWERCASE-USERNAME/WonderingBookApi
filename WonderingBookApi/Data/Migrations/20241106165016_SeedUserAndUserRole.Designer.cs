// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WonderingBookApi.Data;

#nullable disable

namespace WonderingBookApi.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241106165016_SeedUserAndUserRole")]
    partial class SeedUserAndUserRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1bfa4d50-b885-48b9-835a-f47ad854046b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "03482d4b-c825-4ae8-a1f1-26e98f3b8a5b",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "f1de4cb5-7f7c-4ba9-9453-22ec3840984b",
                            Name = "ContentProvider",
                            NormalizedName = "CONTENTPROVIDER"
                        },
                        new
                        {
                            Id = "2281c643-65a2-4fd6-83bc-ae240794b875",
                            Name = "PremiumUser",
                            NormalizedName = "PREMIUMUSER"
                        },
                        new
                        {
                            Id = "fcd4a4b5-d492-4290-8c45-8c94b7f8d689",
                            Name = "RegularUser",
                            NormalizedName = "REGULARUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7a9df144-5fe3-4adb-b60c-0e309df83bd7",
                            RoleId = "1bfa4d50-b885-48b9-835a-f47ad854046b"
                        },
                        new
                        {
                            UserId = "4b0fe916-d76e-4182-a447-4893480c6b4c",
                            RoleId = "1bfa4d50-b885-48b9-835a-f47ad854046b"
                        },
                        new
                        {
                            UserId = "3d006212-a50c-45d5-9368-b8d3c0548de3",
                            RoleId = "03482d4b-c825-4ae8-a1f1-26e98f3b8a5b"
                        },
                        new
                        {
                            UserId = "3bf051e7-cc4b-4b46-bff6-b3c982e51ecd",
                            RoleId = "f1de4cb5-7f7c-4ba9-9453-22ec3840984b"
                        },
                        new
                        {
                            UserId = "41d26d4e-d471-4e9c-b1fc-8b01e73218b3",
                            RoleId = "2281c643-65a2-4fd6-83bc-ae240794b875"
                        },
                        new
                        {
                            UserId = "3fc33030-5b15-481a-9ca6-ebb458b0e08c",
                            RoleId = "fcd4a4b5-d492-4290-8c45-8c94b7f8d689"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WonderingBookApi.Models.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CuratorNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiscAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArticleId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WonderingBookApi.Models.ArticleTopic", b =>
                {
                    b.Property<Guid>("ArticleTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("ArticleTopicId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TopicId");

                    b.ToTable("ArticleTopics");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("PublishedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WonderingBookApi.Models.FinancialTransaction", b =>
                {
                    b.Property<Guid>("FinancialTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("FinancialTransactionId");

                    b.HasIndex("TransactionCode")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("WonderingBookApi.Models.IdeaCard", b =>
                {
                    b.Property<Guid>("IdeaCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdeaCardId");

                    b.HasIndex("ArticleId");

                    b.ToTable("IdeaCards");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PayAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("WalletId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WonderingBookApi.Models.SavedIdea", b =>
                {
                    b.Property<Guid>("SavedIdeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdeaCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SavedIdeaId");

                    b.HasIndex("IdeaCardId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedIdeas");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            TopicName = "habit"
                        },
                        new
                        {
                            TopicId = 2,
                            TopicName = "productivity"
                        },
                        new
                        {
                            TopicId = 3,
                            TopicName = "mindfulness"
                        },
                        new
                        {
                            TopicId = 4,
                            TopicName = "motivation"
                        },
                        new
                        {
                            TopicId = 5,
                            TopicName = "personal-development"
                        },
                        new
                        {
                            TopicId = 6,
                            TopicName = "success"
                        },
                        new
                        {
                            TopicId = 7,
                            TopicName = "growth"
                        },
                        new
                        {
                            TopicId = 8,
                            TopicName = "learning"
                        },
                        new
                        {
                            TopicId = 9,
                            TopicName = "inspiration"
                        },
                        new
                        {
                            TopicId = 10,
                            TopicName = "wellness"
                        });
                });

            modelBuilder.Entity("WonderingBookApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7a9df144-5fe3-4adb-b60c-0e309df83bd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b21a2d8-976f-4ce8-8c81-c9a9578faace",
                            CreatedAt = new DateTime(2024, 10, 24, 5, 14, 16, 0, DateTimeKind.Unspecified),
                            Email = "hungtdhe171201@fpt.edu.vn",
                            EmailConfirmed = false,
                            Fullname = "Tran Duc Hung (K17 HL)",
                            IsAdmin = true,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(6966),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 24, 5, 14, 16, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "HUNGTDHE171201@FPT.EDU.VN",
                            NormalizedUserName = "HUNGTDHE171201",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "S75KO3CFMZXMHCVSWCS4T6JY3IEZO4LD",
                            TwoFactorEnabled = false,
                            UserName = "hungtdhe171201"
                        },
                        new
                        {
                            Id = "4b0fe916-d76e-4182-a447-4893480c6b4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8da8cab1-ee6d-4d24-9984-001ef8139ea3",
                            CreatedAt = new DateTime(2024, 10, 25, 13, 41, 1, 0, DateTimeKind.Unspecified),
                            Email = "giangthhe170978@fpt.edu.vn",
                            EmailConfirmed = false,
                            Fullname = "17 Tran Hoang Giang K17",
                            IsAdmin = true,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(6981),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 25, 13, 41, 1, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "GIANGTHHE170978@FPT.EDU.VN",
                            NormalizedUserName = "GIANGTHHE170978",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QVQX4RBEDDPFMPWUJYH45JH7YJFFTAOS",
                            TwoFactorEnabled = false,
                            UserName = "giangthhe170978"
                        },
                        new
                        {
                            Id = "3d006212-a50c-45d5-9368-b8d3c0548de3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17b82427-bb11-458e-a9bd-96bd0f8ce73f",
                            CreatedAt = new DateTime(2024, 10, 23, 1, 57, 10, 0, DateTimeKind.Unspecified),
                            Email = "khanhgiahaika3@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Bùi Gia Khánh",
                            IsAdmin = false,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(6990),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 23, 1, 57, 10, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "KHANHGIAHAIKA3@GMAIL.COM",
                            NormalizedUserName = "KHANHGIAHAIKA3",
                            PasswordHash = "AQAAAAIAAYagAAAAEOInVfBvutBd8S8U2Ck8h2U3RHdD4EcHixqFx4djMr/io5hJ2kHThCmZ4R+gyZZWQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5LVH7X6TASZOU4LISF6OD32DCGAIE52J",
                            TwoFactorEnabled = false,
                            UserName = "khanhgiahaika3"
                        },
                        new
                        {
                            Id = "3bf051e7-cc4b-4b46-bff6-b3c982e51ecd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ba16f7a-6406-4dea-b0a2-98252ba9180f",
                            CreatedAt = new DateTime(2024, 10, 26, 13, 56, 56, 0, DateTimeKind.Unspecified),
                            Email = "chienquyetsthang@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Trần Quyết Chiến",
                            IsAdmin = false,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(7003),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 26, 13, 56, 56, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "CHIENQUETSTHANG@GMAIL.COM",
                            NormalizedUserName = "CHIENQUETSTHANG",
                            PasswordHash = "AQAAAAIAAYagAAAAECxtILI8M8NNbIKk1SARv2l8niXqUXeHAjdd+U6s3Z88PI671uQL0vCJdgOhACDgBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FQ3GKA3ESFQ65WY6COZSY2NUNMJBJJCK",
                            TwoFactorEnabled = false,
                            UserName = "chienquyetsthang"
                        },
                        new
                        {
                            Id = "41d26d4e-d471-4e9c-b1fc-8b01e73218b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "072a38e7-3f28-40a3-b37f-278543217c7f",
                            CreatedAt = new DateTime(2024, 10, 22, 14, 45, 19, 0, DateTimeKind.Unspecified),
                            Email = "hoangtran8386@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Trần Huy Hoàng",
                            IsAdmin = false,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(7013),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 22, 14, 45, 19, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "HOANGTRAN8386@GMAIL.COM",
                            NormalizedUserName = "HOANGTRAN8386",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCRqT2rhrpnh0B7xqxFZTFijjbXl/4i3/jQKkrr6uyIdYcLk67oAUdRmOvmkUdBnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JFIALES6WXZYQRDRMSS4CUBPEM2ALTXJ",
                            TwoFactorEnabled = false,
                            UserName = "hoangtran8386"
                        },
                        new
                        {
                            Id = "3fc33030-5b15-481a-9ca6-ebb458b0e08c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "404ea804-cbb9-4086-8f5a-25a77be98934",
                            CreatedAt = new DateTime(2024, 10, 21, 3, 32, 31, 0, DateTimeKind.Unspecified),
                            Email = "tuanhoang333@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Hoàng Huy Tuấn",
                            IsAdmin = false,
                            LastActiveAt = new DateTime(2024, 11, 6, 23, 50, 15, 507, DateTimeKind.Local).AddTicks(7023),
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 10, 21, 3, 32, 47, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "TUANHOANG333@GMAIL.COM",
                            NormalizedUserName = "TUANHOANG333",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRCZ/X2WM79M5kVq9c3L15pZrEvN/TTUEQ+H++Wd+gNuewMropdS1BJ47imojZR+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "M5WLBKZOVBWHW2VWBW7IVYOPTFM7UIJR",
                            TwoFactorEnabled = false,
                            UserName = "tuanhoang333"
                        });
                });

            modelBuilder.Entity("WonderingBookApi.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WonderingBookApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WonderingBookApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WonderingBookApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WonderingBookApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WonderingBookApi.Models.Article", b =>
                {
                    b.HasOne("WonderingBookApi.Models.Book", "Book")
                        .WithMany("Articles")
                        .HasForeignKey("BookId");

                    b.HasOne("WonderingBookApi.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WonderingBookApi.Models.ArticleTopic", b =>
                {
                    b.HasOne("WonderingBookApi.Models.Article", "Article")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WonderingBookApi.Models.Topic", "Topic")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WonderingBookApi.Models.FinancialTransaction", b =>
                {
                    b.HasOne("WonderingBookApi.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WonderingBookApi.Models.IdeaCard", b =>
                {
                    b.HasOne("WonderingBookApi.Models.Article", "Article")
                        .WithMany("IdeaCards")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Payment", b =>
                {
                    b.HasOne("WonderingBookApi.Models.Wallet", "Wallet")
                        .WithMany("Payments")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WonderingBookApi.Models.SavedIdea", b =>
                {
                    b.HasOne("WonderingBookApi.Models.IdeaCard", "IdeaCard")
                        .WithMany("SavedIdeas")
                        .HasForeignKey("IdeaCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WonderingBookApi.Models.User", "User")
                        .WithMany("SavedIdeas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdeaCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Wallet", b =>
                {
                    b.HasOne("WonderingBookApi.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("WonderingBookApi.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Article", b =>
                {
                    b.Navigation("ArticleTopics");

                    b.Navigation("IdeaCards");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Book", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("WonderingBookApi.Models.IdeaCard", b =>
                {
                    b.Navigation("SavedIdeas");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Topic", b =>
                {
                    b.Navigation("ArticleTopics");
                });

            modelBuilder.Entity("WonderingBookApi.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("SavedIdeas");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WonderingBookApi.Models.Wallet", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
